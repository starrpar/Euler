import java.util.List;
import java.util.ArrayList;

public class App {
    /*
     * Problem statement:
     * The sequence of triangle numbers is generated by adding the natural numbers.
     * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
     * ten terms would be:
     * 
     * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
     * 
     * Let us list the factors of the first seven triangle numbers:
     * 
     * 1: 1
     * 3: 1,3
     * 6: 1,2,3,6
     * 10: 1,2,5,10
     * 15: 1,3,5,15
     * 21: 1,3,7,21
     * 28: 1,2,4,7,14,28
     * We can see that 28 is the first triangle number to have over five divisors.
     * 
     * What is the value of the first triangle number to have over five hundred
     * divisors?
     */
    public static void main(String[] args) {
        long j = 0L;
        int k = 0;
        int limit = 100000;
        List<Long> factors = new ArrayList<Long>();

        for (int i = 1; i < limit; i++) {
            if (k > 500) {
                break;
            }
            // System.out.println("Most recent triangle number: " + j + "(k is: " + k +
            // ")");
            // reset k, factors
            k = 0;
            factors = null;
            j = calculateTheNextTriangleNumber(i);
            factors = determineFactorsOfThatTriangleNumber(j);
            k = determineTheQuantityOfFactorsForThatTN(factors);
            // stop when first triangle number has 501+ factors (i.e. > 500) - these are NOT
            // base factors,
            // but rather ALL factors (multiples count - so all EVEN numbers are included,
            // even though
            // they are all multiples of 2)
        }

        System.out.println(
                "Last triangle number - presumably with over 500 factors - is: " + j + ", with " + k + " factors");
    }

    private static long calculateTheNextTriangleNumber(int numberOfTriangleNumber) {
        long sum = 0;
        for (int i = 1; i <= numberOfTriangleNumber; i++) {
            sum += i;
        }
        return sum;
    }

    private static List<Long> determineFactorsOfThatTriangleNumber(long triangleNumber) {
        ArrayList<Long> factors = new ArrayList<Long>();

        for (long i = 1; i <= triangleNumber; i++) {
            // first part is simply to always capture '1'
            if ((triangleNumber / i == triangleNumber) || (triangleNumber % i == 0)) {
                factors.add(i);
            }
        }
        return factors;
    }

    private static int determineTheQuantityOfFactorsForThatTN(List<Long> factors) {
        return factors.size();
    }
}
